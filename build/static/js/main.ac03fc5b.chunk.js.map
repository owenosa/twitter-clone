{"version":3,"sources":["SidebarOption.js","Sidebar.js","firebase.js","TweetBox.js","Post.js","Feed.js","Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Sidebar","HomeIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","Button","variant","fullWidth","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TweetBox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","Avatar","src","onChange","e","target","value","placeholder","type","onClick","preventDefault","collection","add","displayName","username","verified","image","avatar","Post","alt","fontSize","Feed","posts","setPosts","useEffect","onSnapshot","snapshot","docs","map","doc","data","post","Widgets","sourceType","screenName","options","height","url","via","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac03fc5b.chunk.js","sourcesContent":["import React from 'react';\nimport './SidebarOption.css'\n\nfunction SidebarOption({ active, text, Icon}){\n    return (\n        <div className={`sidebarOption ${active && 'sidebarOption--active'}` }>\n            <Icon />\n            <h2>{text}</h2>\n        </div>\n    );\n}\n\nexport default SidebarOption;","import React from 'react';\nimport './Sidebar.css';\nimport SidebarOption from './SidebarOption';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport HomeIcon from '@material-ui/icons/Home';\nimport SearchIcon from '@material-ui/icons/Search'\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport { Button } from '@material-ui/core';\n\nfunction Sidebar(){\n    return(\n        <div className=\"sidebar\">\n            {/* Twitter icon */}\n            <TwitterIcon className=\"sidebar_twitter_icon\"/>\n\n            {/* Sidebar Option */}\n            <SidebarOption active Icon ={HomeIcon} text = \"Home\"/>\n            {/* Sidebar Option */}\n            <SidebarOption Icon ={SearchIcon} text = \"Explore\"/>\n            {/* Sidebar Option */}\n            <SidebarOption Icon ={NotificationsNoneIcon} text = \"Notifications\"/>\n            {/* Sidebar Option */}\n            <SidebarOption Icon ={MailOutlineIcon} text = \"Mail\"/>\n            {/* Sidebar Option */}\n            <SidebarOption Icon ={BookmarkBorderIcon} text = \"Bookmarks\"/>\n            {/* Sidebar Option */}\n            <SidebarOption Icon ={ListAltIcon} text = \"Lists\"/>\n            {/* Sidebar Option */}\n            <SidebarOption Icon ={PermIdentityIcon} text = \"Profile\"/>\n            {/* Sidebar Option */}\n            <SidebarOption Icon ={MoreHorizIcon} text = \"More\"/>\n\n            {/* Button -> Tweet */}\n            <Button variant=\"outlined\" className=\"sidebar__tweet\" fullWidth=\"\"> Tweet </Button>\n        </div>\n    );\n}\n\nexport default Sidebar;","import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCjM_bxsCWh0eeOMgjS4J5MWAi1XjiB4HQ\",\n    authDomain: \"twitter-clone-f0c95.firebaseapp.com\",\n    databaseURL: \"https://twitter-clone-f0c95.firebaseio.com\",\n    projectId: \"twitter-clone-f0c95\",\n    storageBucket: \"twitter-clone-f0c95.appspot.com\",\n    messagingSenderId: \"448968036656\",\n    appId: \"1:448968036656:web:a84cda8661781df4c4f8f5\",\n    measurementId: \"G-N7GSQ89XWQ\"\n  };\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nexport default db;","import React, { useState } from 'react';\nimport \"./TweetBox.css\";\nimport { Avatar, Button } from '@material-ui/core';\nimport db from './firebase'\nfunction TweetBox() {\n    const [tweetMessage, setTweetMessage] = useState (\"\");\n    const [tweetImage, setTweetImage] = useState (\"\");\n\n    const sendTweet = e => {\n        e.preventDefault();\n        db.collection('posts').add({\n            displayName: \"Owen Osagide\",\n            username: \"owenosa\",\n            verified: true,\n            text: tweetMessage,\n            image: tweetImage,\n            avatar: 'https://i.gifer.com/4j.gif'\n        })\n    }\n    return (\n        <div className=\"tweetBox\">\n            <form>\n                <div className=\"tweetBox__input\">\n                    <Avatar src=\"img/earth.jpg\"></Avatar>\n                    <input onChange = {e => setTweetMessage (e.target.value)} value = {tweetMessage} placeholder=\"Whats happening\" />\n                </div>\n                <input onChange = {e => setTweetImage (e.target.value)} value = {tweetImage} className=\"tweetBox_imageInput\" placeholder=\"Optional: Enter Image Url\" type=\"text\" />\n                \n                <Button onClick = {sendTweet} className=\"tweetBox__tweetButton\"> Tweet </Button>\n            </form>\n        </div>\n    );\n}\n\nexport default TweetBox;","import React from 'react';\nimport \"./Post.css\";\nimport { Avatar } from '@material-ui/core';\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport PublishIcon from '@material-ui/icons/Publish';\n\nfunction Post({\n    displayName,\n    username,\n    verified,\n    text,\n    image, \n    avatar,\n}){\n    return (\n        <div className=\"post\">\n            <div className=\"post__avatar\">\n                <Avatar src={avatar} />\n            </div>\n            <div className=\"post__body\">\n                <div className=\"post__header\">\n                    <div className=\"post__headerText\">\n                    <h3>{displayName} \n                    {verified && <VerifiedUserIcon className=\"post__badge\"/>}\n                    <span className=\"post__headerSpecial\">@{username}</span></h3>\n                    </div>\n                    <div className=\"post__headerDesription\">\n                        <p>{text}</p>\n                    </div>\n                </div>\n                <img src={image} alt=\"\"/> \n                <div className=\"post__footer\">\n                    <ChatBubbleOutlineIcon fontSize= \"small\" />\n                    <RepeatIcon fontSize= \"small\" />\n                    <FavoriteBorderIcon fontSize= \"small\" />\n                    <PublishIcon fontSize= \"small\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;","import React, { useState, useEffect } from 'react'\nimport TweetBox from './TweetBox';\nimport Post from './Post'\nimport './Feed.css'\nimport db from './firebase';\n\nfunction Feed(){\n    const [posts, setPosts] = useState ([]);\n\n    useEffect (() => {\n        db.collection('posts').onSnapshot(snapshot => (\n            setPosts(snapshot.docs.map(doc => doc.data()))\n        ))\n    }, []);\n\n    return(\n        <div className=\"feed\">\n            {/* Header */}\n            <div className=\"feed__header\">\n                <h2> Home </h2>\n            </div> \n            \n            {/* TweetBox */}\n            <TweetBox /> \n            {posts.map(post => (\n                <Post\n                    displayName={post.displayName}\n                    username= {post.username}\n                    verified= {post.verified}\n                    text= {post.text}\n                    avatar = {post.avatar}\n                    image = {post.image}\n                />\n            ))}\n        </div>\n    )\n}\n\nexport default Feed;","import React from 'react';\nimport './Widgets.css';\nimport {\n    TwitterTimelineEmbed,\n    TwitterShareButton,\n    TwitterTweetEmbed,\n} from \"react-twitter-embed\";\nimport SearchIcon from '@material-ui/icons/Search';\n\nfunction Widgets(){\n    return(\n        <div className=\"widgets\">\n            <div className=\"widgets__input\">\n                <SearchIcon className=\"widgets__searchIcon\" />\n                <input placeholder=\"Search Twitter\" type=\"text\" />\n            </div>\n\n            <div className=\"widgets__widgetContainer\">\n                <h2>What's happening</h2>\n\n\n                <TwitterTimelineEmbed \n                    sourceType = \"profile\"\n                    screenName = \"snapgoal\"\n                    options = {{ height: 700 }} \n                    />\n\n                <TwitterShareButton \n                    url={\"https://facebook.com/espn\"}\n                    options={{ text: \"manchester united is brilliant\", via: \"espn\"}} \n                    />\n            </div>\n        </div>\n    )\n}\n\nexport default Widgets","import React from 'react';\nimport Sidebar from './Sidebar';\nimport Feed from './Feed';\nimport Widgets from './Widgets'\nimport './App.css';\n\nfunction App() {\n  return (\n    // BEM\n    <div className=\"app\">\n      {/* Sidebar */}\n      <Sidebar />\n\n      {/* Feed */}\n      <Feed />\n\n      {/* Widgets */}\n      <Widgets />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}